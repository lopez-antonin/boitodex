// Mocks generated by Mockito 5.4.6 from annotations
// in boitodex/test/unit/data/repositories/car_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:boitodex/data/datasources/local/car_local_datasource.dart'
    as _i2;
import 'package:boitodex/data/models/car_model.dart' as _i4;
import 'package:boitodex/data/models/filter_model.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CarLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarLocalDataSource extends _i1.Mock
    implements _i2.CarLocalDataSource {
  MockCarLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> insertCar(_i4.CarModel? car) => (super.noSuchMethod(
        Invocation.method(
          #insertCar,
          [car],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<void> updateCar(_i4.CarModel? car) => (super.noSuchMethod(
        Invocation.method(
          #updateCar,
          [car],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteCar(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCar,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.CarModel?> getCarById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getCarById,
          [id],
        ),
        returnValue: _i3.Future<_i4.CarModel?>.value(),
      ) as _i3.Future<_i4.CarModel?>);

  @override
  _i3.Future<List<_i4.CarModel>> getCars({
    _i5.FilterModel? filter,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCars,
          [],
          {
            #filter: filter,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i3.Future<List<_i4.CarModel>>.value(<_i4.CarModel>[]),
      ) as _i3.Future<List<_i4.CarModel>>);

  @override
  _i3.Future<int> getCarCount({_i5.FilterModel? filter}) => (super.noSuchMethod(
        Invocation.method(
          #getCarCount,
          [],
          {#filter: filter},
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<List<String>> getDistinctBrands() => (super.noSuchMethod(
        Invocation.method(
          #getDistinctBrands,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<List<String>> getDistinctShapes() => (super.noSuchMethod(
        Invocation.method(
          #getDistinctShapes,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<List<_i4.CarModel>> getAllCarsForExport() => (super.noSuchMethod(
        Invocation.method(
          #getAllCarsForExport,
          [],
        ),
        returnValue: _i3.Future<List<_i4.CarModel>>.value(<_i4.CarModel>[]),
      ) as _i3.Future<List<_i4.CarModel>>);
}
