// Mocks generated by Mockito 5.4.6 from annotations
// in boitodex/test/unit/features/home/presentation/viewmodel/home_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:boitodex/core/error/failures.dart' as _i7;
import 'package:boitodex/domain/entities/car.dart' as _i8;
import 'package:boitodex/domain/entities/filter.dart' as _i9;
import 'package:boitodex/domain/repositories/car_repository.dart' as _i2;
import 'package:boitodex/domain/usecases/cars/delete_car.dart' as _i10;
import 'package:boitodex/domain/usecases/cars/get_cars.dart' as _i5;
import 'package:boitodex/domain/usecases/export/export_cars.dart' as _i11;
import 'package:boitodex/features/car_form/data/services/export_service.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCarRepository_0 extends _i1.SmartFake implements _i2.CarRepository {
  _FakeCarRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExportService_2 extends _i1.SmartFake implements _i4.ExportService {
  _FakeExportService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCars].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCars extends _i1.Mock implements _i5.GetCars {
  MockGetCars() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CarRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCarRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CarRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.Car>>> call({
    _i9.CarFilter? filter,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #filter: filter,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, List<_i8.Car>>>.value(
            _FakeEither_1<_i7.Failure, List<_i8.Car>>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #filter: filter,
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i8.Car>>>);
}

/// A class which mocks [DeleteCar].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCar extends _i1.Mock implements _i10.DeleteCar {
  MockDeleteCar() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CarRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCarRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CarRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, void>> call(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, void>>.value(
            _FakeEither_1<_i7.Failure, void>(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, void>>);
}

/// A class which mocks [ExportCars].
///
/// See the documentation for Mockito's code generation for more information.
class MockExportCars extends _i1.Mock implements _i11.ExportCars {
  MockExportCars() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CarRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCarRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CarRepository);

  @override
  _i4.ExportService get exportService => (super.noSuchMethod(
        Invocation.getter(#exportService),
        returnValue: _FakeExportService_2(
          this,
          Invocation.getter(#exportService),
        ),
      ) as _i4.ExportService);

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}
