// Mocks generated by Mockito 5.4.6 from annotations
// in boitodex/test/unit/features/car_form/presentation/viewmodel/car_form_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i12;

import 'package:boitodex/core/error/failures.dart' as _i7;
import 'package:boitodex/domain/entities/car.dart' as _i8;
import 'package:boitodex/domain/repositories/car_repository.dart' as _i2;
import 'package:boitodex/domain/usecases/cars/add_car.dart' as _i5;
import 'package:boitodex/domain/usecases/cars/delete_car.dart' as _i10;
import 'package:boitodex/domain/usecases/cars/update_car.dart' as _i9;
import 'package:boitodex/domain/usecases/media/pick_image.dart' as _i11;
import 'package:boitodex/features/car_form/data/services/image_service.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCarRepository_0 extends _i1.SmartFake implements _i2.CarRepository {
  _FakeCarRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImageService_2 extends _i1.SmartFake implements _i4.ImageService {
  _FakeImageService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddCar].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddCar extends _i1.Mock implements _i5.AddCar {
  MockAddCar() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CarRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCarRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CarRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, int>> call(_i8.Car? car) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [car],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, int>>.value(
            _FakeEither_1<_i7.Failure, int>(
          this,
          Invocation.method(
            #call,
            [car],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, int>>);
}

/// A class which mocks [UpdateCar].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCar extends _i1.Mock implements _i9.UpdateCar {
  MockUpdateCar() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CarRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCarRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CarRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, void>> call(_i8.Car? car) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [car],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, void>>.value(
            _FakeEither_1<_i7.Failure, void>(
          this,
          Invocation.method(
            #call,
            [car],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, void>>);
}

/// A class which mocks [DeleteCar].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCar extends _i1.Mock implements _i10.DeleteCar {
  MockDeleteCar() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CarRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCarRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CarRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, void>> call(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, void>>.value(
            _FakeEither_1<_i7.Failure, void>(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, void>>);
}

/// A class which mocks [PickImage].
///
/// See the documentation for Mockito's code generation for more information.
class MockPickImage extends _i1.Mock implements _i11.PickImage {
  MockPickImage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ImageService get imageService => (super.noSuchMethod(
        Invocation.getter(#imageService),
        returnValue: _FakeImageService_2(
          this,
          Invocation.getter(#imageService),
        ),
      ) as _i4.ImageService);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i12.Uint8List?>> fromGallery() =>
      (super.noSuchMethod(
        Invocation.method(
          #fromGallery,
          [],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i12.Uint8List?>>.value(
            _FakeEither_1<_i7.Failure, _i12.Uint8List?>(
          this,
          Invocation.method(
            #fromGallery,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i12.Uint8List?>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i12.Uint8List?>> fromCamera() =>
      (super.noSuchMethod(
        Invocation.method(
          #fromCamera,
          [],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i12.Uint8List?>>.value(
            _FakeEither_1<_i7.Failure, _i12.Uint8List?>(
          this,
          Invocation.method(
            #fromCamera,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i12.Uint8List?>>);
}
