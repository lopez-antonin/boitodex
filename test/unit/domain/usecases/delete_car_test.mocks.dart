// Mocks generated by Mockito 5.4.6 from annotations
// in boitodex/test/unit/domain/usecases/delete_car_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:boitodex/core/error/failures.dart' as _i5;
import 'package:boitodex/domain/entities/car.dart' as _i6;
import 'package:boitodex/domain/entities/filter.dart' as _i7;
import 'package:boitodex/domain/repositories/car_repository.dart' as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CarRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarRepository extends _i1.Mock implements _i3.CarRepository {
  MockCarRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> addCar(_i6.Car? car) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCar,
          [car],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #addCar,
            [car],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateCar(_i6.Car? car) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCar,
          [car],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateCar,
            [car],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteCar(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCar,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteCar,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Car?>> getCarById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCarById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Car?>>.value(
            _FakeEither_0<_i5.Failure, _i6.Car?>(
          this,
          Invocation.method(
            #getCarById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Car?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Car>>> getCars({
    _i7.CarFilter? filter,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCars,
          [],
          {
            #filter: filter,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Car>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Car>>(
          this,
          Invocation.method(
            #getCars,
            [],
            {
              #filter: filter,
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Car>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> getCarCount(
          {_i7.CarFilter? filter}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCarCount,
          [],
          {#filter: filter},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #getCarCount,
            [],
            {#filter: filter},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<String>>> getBrands() =>
      (super.noSuchMethod(
        Invocation.method(
          #getBrands,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<String>>>.value(
            _FakeEither_0<_i5.Failure, List<String>>(
          this,
          Invocation.method(
            #getBrands,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<String>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<String>>> getShapes() =>
      (super.noSuchMethod(
        Invocation.method(
          #getShapes,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<String>>>.value(
            _FakeEither_0<_i5.Failure, List<String>>(
          this,
          Invocation.method(
            #getShapes,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<String>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Car>>> getAllCarsForExport() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCarsForExport,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Car>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Car>>(
          this,
          Invocation.method(
            #getAllCarsForExport,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Car>>>);
}
